
uart.elf:     file format elf32-littlearm
uart.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000269

Program Header:
    LOAD off    0x00010000 vaddr 0x08000000 paddr 0x08000000 align 2**16
         filesz 0x000003b4 memsz 0x000003b4 flags r-x
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b4  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  20000000  20000000  000103b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  20000000  20000000  00000000  2**0
                  ALLOC
  3 .debug_info   00000673  00000000  00000000  000103b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000015e  00000000  00000000  00010a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000048  00000000  00000000  00010b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_ranges 00000038  00000000  00000000  00010bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000143  00000000  00000000  00010c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000647  00000000  00000000  00010d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000038  00000000  00000000  0001138f  2**0
                  CONTENTS, READONLY
 10 .ARM.attributes 00000033  00000000  00000000  000113c7  2**0
                  CONTENTS, READONLY
 11 .debug_frame  00000090  00000000  00000000  000113fc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
08000000 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 uart.c
08000150 g     F .text	00000058 copy_data
00000000 g       *ABS*	00000000 __data_size
080003b4 g       .text	00000000 _sidata
080003b4 g       .text	00000000 _etext
20000000 g       .bss	00000000 _sbss
00000000 g       *ABS*	00000000 __bss_size
20000000 g       .data	00000000 _sdata
20000000 g       .bss	00000000 _ebss
08000000 g     O .text	00000150 vector_table
080001a8 g     F .text	000000c0 set_system_clock_to_72Mhz
08000268 g     F .text	0000014c main
000003b4 g       *ABS*	00000000 __text_size
20000000 g       .data	00000000 _edata



Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 80 00 20 69 02 00 08 00 00 00 00 00 00 00 00     ... i...........
	...

08000150 <copy_data>:

/*************************************************
* Copy the data contents from LMA to VMA
*************************************************/
void copy_data(void)
{
 8000150:	b082      	sub	sp, #8
	extern char _etext, _sdata, _edata, _sbss, _ebss;
	char *src = &_etext;
 8000152:	4b10      	ldr	r3, [pc, #64]	; (8000194 <copy_data+0x44>)
 8000154:	9301      	str	r3, [sp, #4]
	char *dst = &_sdata;
 8000156:	4b10      	ldr	r3, [pc, #64]	; (8000198 <copy_data+0x48>)
 8000158:	9300      	str	r3, [sp, #0]

	/* ROM has data at end of text; copy it.  */
	while (dst < &_edata)
 800015a:	e007      	b.n	800016c <copy_data+0x1c>
		*dst++ = *src++;
 800015c:	9b00      	ldr	r3, [sp, #0]
 800015e:	1c5a      	adds	r2, r3, #1
 8000160:	9200      	str	r2, [sp, #0]
 8000162:	9a01      	ldr	r2, [sp, #4]
 8000164:	1c51      	adds	r1, r2, #1
 8000166:	9101      	str	r1, [sp, #4]
 8000168:	7812      	ldrb	r2, [r2, #0]
 800016a:	701a      	strb	r2, [r3, #0]
	extern char _etext, _sdata, _edata, _sbss, _ebss;
	char *src = &_etext;
	char *dst = &_sdata;

	/* ROM has data at end of text; copy it.  */
	while (dst < &_edata)
 800016c:	9b00      	ldr	r3, [sp, #0]
 800016e:	4a0b      	ldr	r2, [pc, #44]	; (800019c <copy_data+0x4c>)
 8000170:	4293      	cmp	r3, r2
 8000172:	d3f3      	bcc.n	800015c <copy_data+0xc>
		*dst++ = *src++;

	/* Zero bss.  */
	for (dst = &_sbss; dst< &_ebss; dst++)
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <copy_data+0x50>)
 8000176:	9300      	str	r3, [sp, #0]
 8000178:	e005      	b.n	8000186 <copy_data+0x36>
		*dst = 0;
 800017a:	9b00      	ldr	r3, [sp, #0]
 800017c:	2200      	movs	r2, #0
 800017e:	701a      	strb	r2, [r3, #0]
	/* ROM has data at end of text; copy it.  */
	while (dst < &_edata)
		*dst++ = *src++;

	/* Zero bss.  */
	for (dst = &_sbss; dst< &_ebss; dst++)
 8000180:	9b00      	ldr	r3, [sp, #0]
 8000182:	3301      	adds	r3, #1
 8000184:	9300      	str	r3, [sp, #0]
 8000186:	9b00      	ldr	r3, [sp, #0]
 8000188:	4a06      	ldr	r2, [pc, #24]	; (80001a4 <copy_data+0x54>)
 800018a:	4293      	cmp	r3, r2
 800018c:	d3f5      	bcc.n	800017a <copy_data+0x2a>
		*dst = 0;
}
 800018e:	b002      	add	sp, #8
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	080003b4 	.word	0x080003b4
 8000198:	20000000 	.word	0x20000000
 800019c:	20000000 	.word	0x20000000
 80001a0:	20000000 	.word	0x20000000
 80001a4:	20000000 	.word	0x20000000

080001a8 <set_system_clock_to_72Mhz>:
 * Then choose Pll as the clock source
 */
void set_system_clock_to_72Mhz(void)
{
	// Necessary wait states for Flash for high speeds
	FLASH->ACR = 0x12;
 80001a8:	4b2d      	ldr	r3, [pc, #180]	; (8000260 <set_system_clock_to_72Mhz+0xb8>)
 80001aa:	2212      	movs	r2, #18
 80001ac:	601a      	str	r2, [r3, #0]
	// Enable HSE
	RCC->CR |= (1 << 16);
 80001ae:	4a2d      	ldr	r2, [pc, #180]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001b0:	4b2c      	ldr	r3, [pc, #176]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001b8:	6013      	str	r3, [r2, #0]
	// Wait untill HSE settles down
	while (!(RCC->CR & (1 << 17)));
 80001ba:	bf00      	nop
 80001bc:	4b29      	ldr	r3, [pc, #164]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0f9      	beq.n	80001bc <set_system_clock_to_72Mhz+0x14>
	// Set PREDIV2 division factor to 5
	RCC->CFGR2 |= (0b0100 << 4);
 80001c8:	4a26      	ldr	r2, [pc, #152]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001ca:	4b26      	ldr	r3, [pc, #152]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Set PLL2 multiplication factor to 8
	RCC->CFGR2 |= (0b0110 << 8);
 80001d4:	4a23      	ldr	r2, [pc, #140]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001d6:	4b23      	ldr	r3, [pc, #140]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80001da:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80001de:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Enable PLL2
	RCC->CR |= (1 << 26);
 80001e0:	4a20      	ldr	r2, [pc, #128]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001e2:	4b20      	ldr	r3, [pc, #128]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80001ea:	6013      	str	r3, [r2, #0]
	// Wait untill PLL2 settles down
	while (!(RCC->CR & (1 << 27)));
 80001ec:	bf00      	nop
 80001ee:	4b1d      	ldr	r3, [pc, #116]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d0f9      	beq.n	80001ee <set_system_clock_to_72Mhz+0x46>
	// Set PLL2 as PREDIV1 clock source
	RCC->CFGR2 |= (1 << 16);
 80001fa:	4a1a      	ldr	r2, [pc, #104]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001fc:	4b19      	ldr	r3, [pc, #100]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 80001fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000204:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Set PREDIV1 division factor to 5
	RCC->CFGR2 |= (0b0100 << 0);
 8000206:	4a17      	ldr	r2, [pc, #92]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000208:	4b16      	ldr	r3, [pc, #88]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 800020a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800020c:	f043 0304 	orr.w	r3, r3, #4
 8000210:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Select Prediv1 as PLL source
	RCC->CFGR |= (1 << 16);
 8000212:	4a14      	ldr	r2, [pc, #80]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000214:	4b13      	ldr	r3, [pc, #76]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800021c:	6053      	str	r3, [r2, #4]
	// Set PLL1 multiplication factor to 9
	RCC->CFGR |= (0b0111 << 18);
 800021e:	4a11      	ldr	r2, [pc, #68]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000220:	4b10      	ldr	r3, [pc, #64]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8000228:	6053      	str	r3, [r2, #4]
	// Set APB1 to 36MHz
	RCC->CFGR |= 1 << 10;
 800022a:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000234:	6053      	str	r3, [r2, #4]
	// Enable PLL
	RCC->CR |= (1 << 24);
 8000236:	4a0b      	ldr	r2, [pc, #44]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000238:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000240:	6013      	str	r3, [r2, #0]
	// Wait untill PLL settles down
	while (!(RCC->CR & (1 << 25)));
 8000242:	bf00      	nop
 8000244:	4b07      	ldr	r3, [pc, #28]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800024c:	2b00      	cmp	r3, #0
 800024e:	d0f9      	beq.n	8000244 <set_system_clock_to_72Mhz+0x9c>
	// Finally, choose PLL as the system clock
	RCC->CFGR |= (0b10 << 0);
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000252:	4b04      	ldr	r3, [pc, #16]	; (8000264 <set_system_clock_to_72Mhz+0xbc>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	6053      	str	r3, [r2, #4]
}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40022000 	.word	0x40022000
 8000264:	40021000 	.word	0x40021000

08000268 <main>:

/*************************************************
* Main code starts from here
*************************************************/
int32_t main(void)
{
 8000268:	b500      	push	{lr}
 800026a:	b083      	sub	sp, #12
	// Copy LMA to VMA for data section
	copy_data();
 800026c:	f7ff ff70 	bl	8000150 <copy_data>

	// Set clock to 72 MHz
	set_system_clock_to_72Mhz();
 8000270:	f7ff ff9a 	bl	80001a8 <set_system_clock_to_72Mhz>

	uint32_t i = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	9301      	str	r3, [sp, #4]
	// Enable alternate function clock. Bit 0 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 0);
 8000278:	4a4a      	ldr	r2, [pc, #296]	; (80003a4 <main+0x13c>)
 800027a:	4b4a      	ldr	r3, [pc, #296]	; (80003a4 <main+0x13c>)
 800027c:	699b      	ldr	r3, [r3, #24]
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6193      	str	r3, [r2, #24]
	// Enable GPIOA clock. Bit 2 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 2);
 8000284:	4a47      	ldr	r2, [pc, #284]	; (80003a4 <main+0x13c>)
 8000286:	4b47      	ldr	r3, [pc, #284]	; (80003a4 <main+0x13c>)
 8000288:	699b      	ldr	r3, [r3, #24]
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
	// Enable clock for UART1 clock. Bit 14 in RCC APB2ENR register
	RCC->APB2ENR |= (1 << 14);
 8000290:	4a44      	ldr	r2, [pc, #272]	; (80003a4 <main+0x13c>)
 8000292:	4b44      	ldr	r3, [pc, #272]	; (80003a4 <main+0x13c>)
 8000294:	699b      	ldr	r3, [r3, #24]
 8000296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800029a:	6193      	str	r3, [r2, #24]

	// Make GPIOA Pin 9,10 (PA9, PA10) alternate-function output (0b1010)
	GPIOA->CRH &= 0xFFFFF00F;
 800029c:	4a42      	ldr	r2, [pc, #264]	; (80003a8 <main+0x140>)
 800029e:	4b42      	ldr	r3, [pc, #264]	; (80003a8 <main+0x140>)
 80002a0:	685b      	ldr	r3, [r3, #4]
 80002a2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80002a6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= 0x00000BB0;
 80002a8:	4a3f      	ldr	r2, [pc, #252]	; (80003a8 <main+0x140>)
 80002aa:	4b3f      	ldr	r3, [pc, #252]	; (80003a8 <main+0x140>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	f443 633b 	orr.w	r3, r3, #2992	; 0xbb0
 80002b2:	6053      	str	r3, [r2, #4]

	// Enable USART
	USART1->CR1 |= (1 << 13);
 80002b4:	4a3d      	ldr	r2, [pc, #244]	; (80003ac <main+0x144>)
 80002b6:	4b3d      	ldr	r3, [pc, #244]	; (80003ac <main+0x144>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002be:	60d3      	str	r3, [r2, #12]
	// Word length - leave default (8 data)
	USART1->CR1 |= (0 << 12);
 80002c0:	4a3a      	ldr	r2, [pc, #232]	; (80003ac <main+0x144>)
 80002c2:	4b3a      	ldr	r3, [pc, #232]	; (80003ac <main+0x144>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	60d3      	str	r3, [r2, #12]
	// Number of stop bits - leave default (1 stop)
	USART1->CR2 |= (0b00 << 12);
 80002c8:	4a38      	ldr	r2, [pc, #224]	; (80003ac <main+0x144>)
 80002ca:	4b38      	ldr	r3, [pc, #224]	; (80003ac <main+0x144>)
 80002cc:	691b      	ldr	r3, [r3, #16]
 80002ce:	6113      	str	r3, [r2, #16]
	// Baud rate
	// BRR should be 468.75 for 9600 baud rate
	// Thus manista is 468 (0x1d4) and fraction is 12 (0xc) (12/16 is .75)
	// Making it 0x1d4c
	USART1->BRR = 0x1d4c;
 80002d0:	4b36      	ldr	r3, [pc, #216]	; (80003ac <main+0x144>)
 80002d2:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80002d6:	609a      	str	r2, [r3, #8]
	// Transmitter enable
	USART1->CR1 |= (1 << 3);
 80002d8:	4a34      	ldr	r2, [pc, #208]	; (80003ac <main+0x144>)
 80002da:	4b34      	ldr	r3, [pc, #208]	; (80003ac <main+0x144>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	60d3      	str	r3, [r2, #12]
	// Receiver enable
	USART1->CR1 |= (1 << 2);
 80002e4:	4a31      	ldr	r2, [pc, #196]	; (80003ac <main+0x144>)
 80002e6:	4b31      	ldr	r3, [pc, #196]	; (80003ac <main+0x144>)
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	60d3      	str	r3, [r2, #12]

	while(1)
	{
		for (i=0; i<26; i++){
 80002f0:	2300      	movs	r3, #0
 80002f2:	9301      	str	r3, [sp, #4]
 80002f4:	e00d      	b.n	8000312 <main+0xaa>
			USART1->DR = 'a' + i;
 80002f6:	4a2d      	ldr	r2, [pc, #180]	; (80003ac <main+0x144>)
 80002f8:	9b01      	ldr	r3, [sp, #4]
 80002fa:	3361      	adds	r3, #97	; 0x61
 80002fc:	6053      	str	r3, [r2, #4]
			while(!(USART1->SR & (1 << 6)));
 80002fe:	bf00      	nop
 8000300:	4b2a      	ldr	r3, [pc, #168]	; (80003ac <main+0x144>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0f9      	beq.n	8000300 <main+0x98>
	// Receiver enable
	USART1->CR1 |= (1 << 2);

	while(1)
	{
		for (i=0; i<26; i++){
 800030c:	9b01      	ldr	r3, [sp, #4]
 800030e:	3301      	adds	r3, #1
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	9b01      	ldr	r3, [sp, #4]
 8000314:	2b19      	cmp	r3, #25
 8000316:	d9ee      	bls.n	80002f6 <main+0x8e>
			USART1->DR = 'a' + i;
			while(!(USART1->SR & (1 << 6)));
		}
		for (i=0; i<26; i++){
 8000318:	2300      	movs	r3, #0
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	e00d      	b.n	800033a <main+0xd2>
			USART1->DR = 'A' + i;
 800031e:	4a23      	ldr	r2, [pc, #140]	; (80003ac <main+0x144>)
 8000320:	9b01      	ldr	r3, [sp, #4]
 8000322:	3341      	adds	r3, #65	; 0x41
 8000324:	6053      	str	r3, [r2, #4]
			while(!(USART1->SR & (1 << 6)));
 8000326:	bf00      	nop
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <main+0x144>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f9      	beq.n	8000328 <main+0xc0>
	{
		for (i=0; i<26; i++){
			USART1->DR = 'a' + i;
			while(!(USART1->SR & (1 << 6)));
		}
		for (i=0; i<26; i++){
 8000334:	9b01      	ldr	r3, [sp, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	9b01      	ldr	r3, [sp, #4]
 800033c:	2b19      	cmp	r3, #25
 800033e:	d9ee      	bls.n	800031e <main+0xb6>
			USART1->DR = 'A' + i;
			while(!(USART1->SR & (1 << 6)));
		}
		for (i=0; i<10; i++){
 8000340:	2300      	movs	r3, #0
 8000342:	9301      	str	r3, [sp, #4]
 8000344:	e00d      	b.n	8000362 <main+0xfa>
			USART1->DR = '0' + i;
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <main+0x144>)
 8000348:	9b01      	ldr	r3, [sp, #4]
 800034a:	3330      	adds	r3, #48	; 0x30
 800034c:	6053      	str	r3, [r2, #4]
			while(!(USART1->SR & (1 << 6)));
 800034e:	bf00      	nop
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <main+0x144>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <main+0xe8>
		}
		for (i=0; i<26; i++){
			USART1->DR = 'A' + i;
			while(!(USART1->SR & (1 << 6)));
		}
		for (i=0; i<10; i++){
 800035c:	9b01      	ldr	r3, [sp, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	9301      	str	r3, [sp, #4]
 8000362:	9b01      	ldr	r3, [sp, #4]
 8000364:	2b09      	cmp	r3, #9
 8000366:	d9ee      	bls.n	8000346 <main+0xde>
			USART1->DR = '0' + i;
			while(!(USART1->SR & (1 << 6)));
		}

		USART1->DR = '\n';
 8000368:	4b10      	ldr	r3, [pc, #64]	; (80003ac <main+0x144>)
 800036a:	220a      	movs	r2, #10
 800036c:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & (1 << 6)));
 800036e:	bf00      	nop
 8000370:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <main+0x144>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000378:	2b00      	cmp	r3, #0
 800037a:	d0f9      	beq.n	8000370 <main+0x108>
		USART1->DR = '\r';
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <main+0x144>)
 800037e:	220d      	movs	r2, #13
 8000380:	605a      	str	r2, [r3, #4]
		while(!(USART1->SR & (1 << 6)));
 8000382:	bf00      	nop
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <main+0x144>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0f9      	beq.n	8000384 <main+0x11c>

		for(i=5000000; i>0; i--);
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <main+0x148>)
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	e002      	b.n	800039c <main+0x134>
 8000396:	9b01      	ldr	r3, [sp, #4]
 8000398:	3b01      	subs	r3, #1
 800039a:	9301      	str	r3, [sp, #4]
 800039c:	9b01      	ldr	r3, [sp, #4]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f9      	bne.n	8000396 <main+0x12e>
	}
 80003a2:	e7a5      	b.n	80002f0 <main+0x88>
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40013800 	.word	0x40013800
 80003b0:	004c4b40 	.word	0x004c4b40
