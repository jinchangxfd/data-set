<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\OL_DVM_v14.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\OL_DVM_v14.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Sun Sep 29 23:09:12 2019
<BR><P>
<H3>Maximum Stack Usage =        360 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; drawScreen() &rArr; drawPowerScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[ac]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[22]">CAN_RX0_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[23]">CAN_RX1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[24]">CAN_SCE_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[21]">CAN_TX_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[38]">CEC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[48]">COMP1_2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[40]">DMA2_Channel1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[41]">DMA2_Channel2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[42]">DMA2_Channel3_IRQHandler</a> from sdadc.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[43]">DMA2_Channel4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[44]">DMA2_Channel5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from interrupt.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[16]">EXTI2_TSC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4d]">FPU_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[45]">SDADC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[46]">SDADC2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[47]">SDADC3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4e]">SystemInit</a> from system_stm32f3xx.o(i.SystemInit) referenced from startup_stm32f373xc.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[39]">TIM12_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3a]">TIM13_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3b]">TIM14_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[26]">TIM15_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[27]">TIM16_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[28]">TIM17_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[29]">TIM18_DAC2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4c]">TIM19_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from sdadc.o(i.TIM3_IRQHandler) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3e]">TIM6_DAC1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[3f]">TIM7_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4b]">USBWakeUp_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[49]">USB_HP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[4a]">USB_LP_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f373xc.o(.text) referenced from startup_stm32f373xc.o(RESET)
 <LI><a href="#[53]">__main</a> from __main.o(!!!main) referenced from startup_stm32f373xc.o(.text)
 <LI><a href="#[52]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[51]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[50]">_snputc</a> from _snputc.o(.text) referenced from c89vsnprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[53]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[56]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[57]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[f8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[58]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[9f]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5a]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[5c]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5e]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5f]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[f9]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[fa]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[60]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[62]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[63]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[64]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[66]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[68]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6a]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6b]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[6c]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[6e]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[fb]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[70]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[72]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[74]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[76]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[fc]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[82]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[78]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[fd]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[100]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[101]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[102]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[103]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[104]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[105]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[106]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[107]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[108]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[109]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[110]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[87]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[55]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[7f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[81]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[119]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[83]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; drawScreen() &rArr; drawPowerScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[11a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[ad]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[86]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[88]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>COMP1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM18_DAC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM19_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM6_DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f373xc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f373xc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
</UL>

<P><STRONG><a name="[11c]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf(char*, ...)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::begin(unsigned char, unsigned char)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
</UL>

<P><STRONG><a name="[8d]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[11d]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[91]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>

<P><STRONG><a name="[93]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[94]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[95]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[96]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[92]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[61]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[59]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[8b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[8c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>

<P><STRONG><a name="[50]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> c89vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[69]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[9c]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[65]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[6d]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[9d]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[67]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[6f]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[5b]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[98]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[124]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[97]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[126]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[a8]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[71]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[73]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[a9]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[75]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[77]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[9a]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[127]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[128]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[aa]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[7b]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a7]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[a1]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[85]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[f2]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[89]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[129]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[af]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[ae]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[b0]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[b1]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[a3]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b2]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[42]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, sdadc.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, interrupt.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler &rArr; setVoltageRange()
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageRange()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentRange()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, system_stm32f3xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, sdadc.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM3_IRQHandler &rArr; std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f373xc.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>SDADC_init()</STRONG> (Thumb, 410 bytes, Stack size 8 bytes, sdadc.o(i._Z10SDADC_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDADC_init()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>at24c_init(unsigned char)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, at24c.o(i._Z10at24c_inith))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at24c_init(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[bc]"></a>drawScreen()</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, draw.o(i._Z10drawScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = drawScreen() &rArr; drawPowerScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>uart_print(char*)</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(i._Z10uart_printPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_char(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf(char*, ...)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[f1]"></a>SDADC_start()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, sdadc.o(i._Z11SDADC_startv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>_delay_init()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i._Z11_delay_initv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>i2c_request(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, i2c.o(i._Z11i2c_requesth))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_page(unsigned char)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_byte(unsigned char)
</UL>

<P><STRONG><a name="[ca]"></a>uart_printf(char*, ...)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, uart.o(i._Z11uart_printfPcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = uart_printf(char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print(char*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
</UL>

<P><STRONG><a name="[d6]"></a>i2c_transmit()</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, i2c.o(i._Z12i2c_transmitv))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_page(unsigned char)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_byte(unsigned char)
</UL>

<P><STRONG><a name="[cb]"></a>componentTest()</STRONG> (Thumb, 1474 bytes, Stack size 48 bytes, ctest.o(i._Z13componentTestv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = componentTest() &rArr; uart_printf(char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_count_us_start()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_count_us_stop()
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf(char*, ...)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print(char*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us(unsigned short)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms(unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
</UL>

<P><STRONG><a name="[cf]"></a>_count_us_stop()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, delay.o(i._Z14_count_us_stopv))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
</UL>

<P><STRONG><a name="[c5]"></a>drawContScreen()</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, draw.o(i._Z14drawContScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = drawContScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setCursor(unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms(unsigned short)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[c3]"></a>drawCurrScreen()</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, draw.o(i._Z14drawCurrScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = drawCurrScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf(char*, ...)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setCursor(unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[c7]"></a>drawFreqScreen()</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, draw.o(i._Z14drawFreqScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = drawFreqScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setCursor(unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[c2]"></a>drawVoltScreen()</STRONG> (Thumb, 478 bytes, Stack size 24 bytes, draw.o(i._Z14drawVoltScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = drawVoltScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf(char*, ...)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setCursor(unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[d8]"></a>i2c_readBuffer(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c.o(i._Z14i2c_readBufferh))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_page(unsigned char)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_byte(unsigned char)
</UL>

<P><STRONG><a name="[ce]"></a>_count_us_start()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, delay.o(i._Z15_count_us_startv))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
</UL>

<P><STRONG><a name="[cc]"></a>adc1_getReading(unsigned char, unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, adc.o(i._Z15adc1_getReadinghh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = adc1_getReading(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[d3]"></a>at24c_read_byte(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at24c.o(i._Z15at24c_read_byteh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at24c_read_byte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_setSlaveAddress(unsigned char)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeBuffer(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readBuffer(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transmit()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_request(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[d9]"></a>at24c_read_page(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, at24c.o(i._Z15at24c_read_pageh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at24c_read_page(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_setSlaveAddress(unsigned char)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_writeBuffer(unsigned char)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_readBuffer(unsigned char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_transmit()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_request(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_floats(unsigned char, float&, float&)
</UL>

<P><STRONG><a name="[c4]"></a>drawPowerScreen()</STRONG> (Thumb, 710 bytes, Stack size 56 bytes, draw.o(i._Z15drawPowerScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = drawPowerScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf(char*, ...)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setCursor(unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::print(char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[d5]"></a>i2c_writeBuffer(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, i2c.o(i._Z15i2c_writeBufferh))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_page(unsigned char)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_byte(unsigned char)
</UL>

<P><STRONG><a name="[b4]"></a>setCurrentRange()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, interrupt.o(i._Z15setCurrentRangev))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BKP()
</UL>

<P><STRONG><a name="[b3]"></a>setVoltageRange()</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, interrupt.o(i._Z15setVoltageRangev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVoltageRange()
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BKP()
</UL>

<P><STRONG><a name="[db]"></a>drawSplashScreen()</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, draw.o(i._Z16drawSplashScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = drawSplashScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_read_floats(unsigned char, float&, float&)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_byte(unsigned char)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print(char*)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_init(unsigned char)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setCursor(unsigned char, unsigned char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::begin(unsigned char, unsigned char)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_init()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>drawCompTestScreen()</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, draw.o(i._Z18drawCompTestScreenv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = drawCompTestScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setCursor(unsigned char, unsigned char)
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawLine(short, short, short, short, bool)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::setFont(const GFXfont*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::print(char*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::clearDisplay()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc1_getReading(unsigned char, unsigned char)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[df]"></a>eeprom_read_floats(unsigned char, float&, float&)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, at24c.o(i._Z18eeprom_read_floatshRfS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = eeprom_read_floats(unsigned char, float&, float&) &rArr; at24c_read_page(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_page(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[d4]"></a>i2c_setSlaveAddress(unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i._Z19i2c_setSlaveAddressh))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_page(unsigned char)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_read_byte(unsigned char)
</UL>

<P><STRONG><a name="[bb]"></a>i2c_init()</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, i2c.o(i._Z8i2c_initv))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at24c_init(unsigned char)
</UL>

<P><STRONG><a name="[e1]"></a>init_BKP()</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, init.o(i._Z8init_BKPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_BKP() &rArr; setVoltageRange()
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageRange()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentRange()
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>init_RCC()</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, init.o(i._Z8init_RCCv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>_delay_ms(unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, delay.o(i._Z9_delay_mst))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::begin(unsigned char, unsigned char)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>_delay_us(unsigned short)</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, delay.o(i._Z9_delay_ust))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::spiWrite(unsigned char)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVoltageRange()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_init()
</UL>

<P><STRONG><a name="[dc]"></a>adc1_init()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, adc.o(i._Z9adc1_initv))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[e2]"></a>init_EXTI()</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, init.o(i._Z9init_EXTIv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_EXTI() &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>init_GPIO()</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, init.o(i._Z9init_GPIOv))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>init_TIM2()</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, init.o(i._Z9init_TIM2v))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>init_TIM3()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, init.o(i._Z9init_TIM3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_TIM3() &rArr; __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>uart_char(char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i._Z9uart_charc))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print(char*)
</UL>

<P><STRONG><a name="[de]"></a>uart_init()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, uart.o(i._Z9uart_initv))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[bd]"></a>LCD_5110::clearDisplay()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 5110.o(i._ZN8LCD_511012clearDisplayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_5110::clearDisplay()
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[e7]"></a>LCD_5110::drawFillRect(short, short, short, short, bool)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, 5110.o(i._ZN8LCD_511012drawFillRectEssssb))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawLine(short, short, short, short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>LCD_5110::begin(unsigned char, unsigned char)</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, 5110.o(i._ZN8LCD_51105beginEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_5110::begin(unsigned char, unsigned char) &rArr; LCD_5110::command(unsigned char) &rArr; LCD_5110::spiWrite(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::command(unsigned char)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms(unsigned short)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[da]"></a>LCD_5110::print(char*)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, 5110.o(i._ZN8LCD_51105printEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printxy(char*, unsigned char, unsigned char)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::printf(char*, ...)
</UL>

<P><STRONG><a name="[d1]"></a>LCD_5110::printf(char*, ...)</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, 5110.o(i._ZN8LCD_51106printfEPcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::print(char*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[e8]"></a>LCD_5110::command(unsigned char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, 5110.o(i._ZN8LCD_51107commandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_5110::command(unsigned char) &rArr; LCD_5110::spiWrite(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::begin(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[c0]"></a>LCD_5110::display()</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, 5110.o(i._ZN8LCD_51107displayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LCD_5110::display() &rArr; LCD_5110::command(unsigned char) &rArr; LCD_5110::spiWrite(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::spiWrite(unsigned char)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::command(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[bf]"></a>LCD_5110::printxy(char*, unsigned char, unsigned char)</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, 5110.o(i._ZN8LCD_51107printxyEPchh))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = LCD_5110::printxy(char*, unsigned char, unsigned char) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::print(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[be]"></a>LCD_5110::setFont(const GFXfont*)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, 5110.o(i._ZN8LCD_51107setFontEPK7GFXfont))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
</UL>

<P><STRONG><a name="[e9]"></a>LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char)</STRONG> (Thumb, 248 bytes, Stack size 100 bytes, 5110.o(i._ZN8LCD_51108drawCharEsshbbh))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawPixel(short, short, unsigned short)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawFillRect(short, short, short, short, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::print(char*)
</UL>

<P><STRONG><a name="[e0]"></a>LCD_5110::drawLine(short, short, short, short, bool)</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, 5110.o(i._ZN8LCD_51108drawLineEssssb))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawFillRect(short, short, short, short, bool)
</UL>

<P><STRONG><a name="[ea]"></a>LCD_5110::spiWrite(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, 5110.o(i._ZN8LCD_51108spiWriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_5110::spiWrite(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_us(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::display()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::command(unsigned char)
</UL>

<P><STRONG><a name="[eb]"></a>LCD_5110::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, 5110.o(i._ZN8LCD_51109drawPixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawLine(short, short, short, short, bool)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char)
</UL>

<P><STRONG><a name="[d0]"></a>LCD_5110::setCursor(unsigned char, unsigned char)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, 5110.o(i._ZN8LCD_51109setCursorEhh))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[b7]"></a>std::sqrt(float)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdadc.o(i._ZSt4sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::sqrt(float) &rArr; __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[a6]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ec]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::sqrt(float)
</UL>

<P><STRONG><a name="[9e]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[84]"></a>main</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = main &rArr; drawScreen() &rArr; drawPowerScreen() &rArr; LCD_5110::printf(char*, ...) &rArr; LCD_5110::print(char*) &rArr; LCD_5110::drawChar(short, short, unsigned char, bool, bool, unsigned char) &rArr; LCD_5110::drawFillRect(short, short, short, short, bool) &rArr; LCD_5110::drawLine(short, short, short, short, bool) &rArr; LCD_5110::drawPixel(short, short, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIM3()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIM2()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EXTI()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_ms(unsigned short)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_RCC()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_BKP()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay_init()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_start()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScreen()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDADC_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[7e]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[52]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;componentTest()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCompTestScreen()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPowerScreen()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawVoltScreen()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawFreqScreen()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCurrScreen()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawContScreen()
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawSplashScreen()
</UL>

<P><STRONG><a name="[f3]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[b5]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[f4]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[79]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[12e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[12f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[5d]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e4]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, init.o(i._Z16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIM3()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EXTI()
</UL>

<P><STRONG><a name="[e3]"></a>__NVIC_SetPriority(IRQn_Type, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, init.o(i._Z18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority(IRQn_Type, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TIM3()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_EXTI()
</UL>

<P><STRONG><a name="[51]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[a0]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
