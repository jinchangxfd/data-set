; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\system_stm32f3xx.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\system_stm32f3xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -IC:\Users\marti\Documents\STM32CubeMX\OL_DVM_v14\RTE\_V14 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F3xx_DFP\1.3.0\Device\Include -D__UVISION_VERSION=522 -D_RTE_ -DSTM32F373xC --omf_browse=.\objects\system_stm32f3xx.crf RTE\Device\STM32F373CC\system_stm32f3xx.c]
                          THUMB

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;243      */
;;;244    void SystemCoreClockUpdate (void)
000000  b530              PUSH     {r4,r5,lr}
;;;245    {
;;;246      uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
000002  2100              MOVS     r1,#0
000004  2000              MOVS     r0,#0
000006  2200              MOVS     r2,#0
000008  2300              MOVS     r3,#0
;;;247    
;;;248      /* Get SYSCLK source -------------------------------------------------------*/
;;;249      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000a  4c20              LDR      r4,|L1.140|
00000c  6864              LDR      r4,[r4,#4]
00000e  f004010c          AND      r1,r4,#0xc
;;;250    
;;;251      switch (tmp)
000012  b121              CBZ      r1,|L1.30|
000014  2904              CMP      r1,#4
000016  d006              BEQ      |L1.38|
000018  2908              CMP      r1,#8
00001a  d125              BNE      |L1.104|
00001c  e007              B        |L1.46|
                  |L1.30|
;;;252      {
;;;253        case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
;;;254          SystemCoreClock = HSI_VALUE;
00001e  4c1c              LDR      r4,|L1.144|
000020  4d1c              LDR      r5,|L1.148|
000022  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;255          break;
000024  e024              B        |L1.112|
                  |L1.38|
;;;256        case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
;;;257          SystemCoreClock = HSE_VALUE;
000026  4c1a              LDR      r4,|L1.144|
000028  4d1a              LDR      r5,|L1.148|
00002a  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;258          break;
00002c  e020              B        |L1.112|
                  |L1.46|
;;;259        case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
;;;260          /* Get PLL clock source and multiplication factor ----------------------*/
;;;261          pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
00002e  4c17              LDR      r4,|L1.140|
000030  6864              LDR      r4,[r4,#4]
000032  f4041070          AND      r0,r4,#0x3c0000
;;;262          pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
000036  4c15              LDR      r4,|L1.140|
000038  6864              LDR      r4,[r4,#4]
00003a  f4043280          AND      r2,r4,#0x10000
;;;263          pllmull = ( pllmull >> 18) + 2;
00003e  2402              MOVS     r4,#2
000040  eb044090          ADD      r0,r4,r0,LSR #18
;;;264    
;;;265    #if defined (STM32F302xE) || defined (STM32F303xE) || defined (STM32F398xx)
;;;266            predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
;;;267          if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
;;;268          {
;;;269            /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;270            SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
;;;271          }
;;;272          else
;;;273          {
;;;274            /* HSI oscillator clock selected as PREDIV1 clock entry */
;;;275            SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
;;;276          }
;;;277    #else      
;;;278          if (pllsource == RCC_CFGR_PLLSRC_HSI_DIV2)
000044  b922              CBNZ     r2,|L1.80|
;;;279          {
;;;280            /* HSI oscillator clock divided by 2 selected as PLL clock entry */
;;;281            SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
000046  4c14              LDR      r4,|L1.152|
000048  4344              MULS     r4,r0,r4
00004a  4d12              LDR      r5,|L1.148|
00004c  602c              STR      r4,[r5,#0]  ; SystemCoreClock
00004e  e00a              B        |L1.102|
                  |L1.80|
;;;282          }
;;;283          else
;;;284          {
;;;285            predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
000050  4c0e              LDR      r4,|L1.140|
000052  6ae4              LDR      r4,[r4,#0x2c]
000054  f004040f          AND      r4,r4,#0xf
000058  1c63              ADDS     r3,r4,#1
;;;286            /* HSE oscillator clock selected as PREDIV1 clock entry */
;;;287            SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
00005a  4c0d              LDR      r4,|L1.144|
00005c  fbb4f4f3          UDIV     r4,r4,r3
000060  4344              MULS     r4,r0,r4
000062  4d0c              LDR      r5,|L1.148|
000064  602c              STR      r4,[r5,#0]  ; SystemCoreClock
                  |L1.102|
;;;288          }
;;;289    #endif /* STM32F302xE || STM32F303xE || STM32F398xx */
;;;290          break;
000066  e003              B        |L1.112|
                  |L1.104|
;;;291        default: /* HSI used as system clock */
;;;292          SystemCoreClock = HSI_VALUE;
000068  4c09              LDR      r4,|L1.144|
00006a  4d0a              LDR      r5,|L1.148|
00006c  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;293          break;
00006e  bf00              NOP      
                  |L1.112|
000070  bf00              NOP                            ;255
;;;294      }
;;;295      /* Compute HCLK clock frequency ----------------*/
;;;296      /* Get HCLK prescaler */
;;;297      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000072  4c06              LDR      r4,|L1.140|
000074  6864              LDR      r4,[r4,#4]
000076  f3c41403          UBFX     r4,r4,#4,#4
00007a  4d08              LDR      r5,|L1.156|
00007c  5d29              LDRB     r1,[r5,r4]
;;;298      /* HCLK clock frequency */
;;;299      SystemCoreClock >>= tmp;
00007e  4c05              LDR      r4,|L1.148|
000080  6824              LDR      r4,[r4,#0]  ; SystemCoreClock
000082  40cc              LSRS     r4,r4,r1
000084  4d03              LDR      r5,|L1.148|
000086  602c              STR      r4,[r5,#0]  ; SystemCoreClock
;;;300    }
000088  bd30              POP      {r4,r5,pc}
;;;301    
                          ENDP

00008a  0000              DCW      0x0000
                  |L1.140|
                          DCD      0x40021000
                  |L1.144|
                          DCD      0x007a1200
                  |L1.148|
                          DCD      SystemCoreClock
                  |L1.152|
                          DCD      0x003d0900
                  |L1.156|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;168      */
;;;169    void SystemInit(void)
000000  4819              LDR      r0,|L2.104|
;;;170    {
;;;171      /* FPU settings ------------------------------------------------------------*/
;;;172      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;173        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  6800              LDR      r0,[r0,#0]
000004  f4400070          ORR      r0,r0,#0xf00000
000008  4917              LDR      r1,|L2.104|
00000a  6008              STR      r0,[r1,#0]
;;;174      #endif
;;;175    
;;;176      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;177      /* Set HSION bit */
;;;178      RCC->CR |= (uint32_t)0x00000001;
00000c  4817              LDR      r0,|L2.108|
00000e  6800              LDR      r0,[r0,#0]
000010  f0400001          ORR      r0,r0,#1
000014  4915              LDR      r1,|L2.108|
000016  6008              STR      r0,[r1,#0]
;;;179    
;;;180      /* Reset CFGR register */
;;;181      RCC->CFGR &= 0xF87FC00C;
000018  4608              MOV      r0,r1
00001a  6840              LDR      r0,[r0,#4]
00001c  4914              LDR      r1,|L2.112|
00001e  4008              ANDS     r0,r0,r1
000020  4912              LDR      r1,|L2.108|
000022  6048              STR      r0,[r1,#4]
;;;182    
;;;183      /* Reset HSEON, CSSON and PLLON bits */
;;;184      RCC->CR &= (uint32_t)0xFEF6FFFF;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  4912              LDR      r1,|L2.116|
00002a  4008              ANDS     r0,r0,r1
00002c  490f              LDR      r1,|L2.108|
00002e  6008              STR      r0,[r1,#0]
;;;185    
;;;186      /* Reset HSEBYP bit */
;;;187      RCC->CR &= (uint32_t)0xFFFBFFFF;
000030  4608              MOV      r0,r1
000032  6800              LDR      r0,[r0,#0]
000034  f4202080          BIC      r0,r0,#0x40000
000038  6008              STR      r0,[r1,#0]
;;;188    
;;;189      /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
;;;190      RCC->CFGR &= (uint32_t)0xFF80FFFF;
00003a  4608              MOV      r0,r1
00003c  6840              LDR      r0,[r0,#4]
00003e  f42000fe          BIC      r0,r0,#0x7f0000
000042  6048              STR      r0,[r1,#4]
;;;191    
;;;192      /* Reset PREDIV1[3:0] bits */
;;;193      RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
000044  4608              MOV      r0,r1
000046  6ac0              LDR      r0,[r0,#0x2c]
000048  f020000f          BIC      r0,r0,#0xf
00004c  62c8              STR      r0,[r1,#0x2c]
;;;194    
;;;195      /* Reset USARTSW[1:0], I2CSW and TIMs bits */
;;;196      RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
00004e  4608              MOV      r0,r1
000050  6b00              LDR      r0,[r0,#0x30]
000052  4909              LDR      r1,|L2.120|
000054  4008              ANDS     r0,r0,r1
000056  4905              LDR      r1,|L2.108|
000058  6308              STR      r0,[r1,#0x30]
;;;197    
;;;198      /* Disable all interrupts */
;;;199      RCC->CIR = 0x00000000;
00005a  2000              MOVS     r0,#0
00005c  6088              STR      r0,[r1,#8]
;;;200    
;;;201    #ifdef VECT_TAB_SRAM
;;;202      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;203    #else
;;;204      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00005e  03c8              LSLS     r0,r1,#15
000060  4901              LDR      r1,|L2.104|
000062  3980              SUBS     r1,r1,#0x80
000064  6008              STR      r0,[r1,#0]
;;;205    #endif
;;;206    }
000066  4770              BX       lr
;;;207    
                          ENDP

                  |L2.104|
                          DCD      0xe000ed88
                  |L2.108|
                          DCD      0x40021000
                  |L2.112|
                          DCD      0xf87fc00c
                  |L2.116|
                          DCD      0xfef6ffff
                  |L2.120|
                          DCD      0xff00fccc

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x007a1200
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "RTE\\Device\\STM32F373CC\\system_stm32f3xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f3xx_c_5d646a67____REV16|
#line 441 "C:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\5.0.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___18_system_stm32f3xx_c_5d646a67____REV16| PROC
#line 442

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f3xx_c_5d646a67____REVSH|
#line 456
|__asm___18_system_stm32f3xx_c_5d646a67____REVSH| PROC
#line 457

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f3xx_c_5d646a67____RRX|
#line 643
|__asm___18_system_stm32f3xx_c_5d646a67____RRX| PROC
#line 644

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
